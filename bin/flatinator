#!/usr/bin/env node


var startTime = (new Date()).getTime();

var program = require('commander');
var uglify = require('uglify-js');
var path = require('path');
var fs = require('fs');
var colors = require('colors');


program
  .version(require('../package').version)
  .usage('[options]');

// sub-command help

program
  .option('-i, --input <file>', 'input file, defaulting to ./build/build.js', './build/build.js')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', './build')
  .option('-n, --name <file>', 'base name for build files defaulting to rebuild', 'rebuild')
  .option('-a, --app <module>', 'App mode - wrap in anonymous function and add call to <module>')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # Flatten ./build/build.js to ./build/rebuild.js');
  console.log('    $ flatinator');
  console.log();
  console.log('    # Flatten ./build/output.js to ./public/js/app.js');
  console.log('    $ flatinator -i ./build/output.js -o ./public/js -n app');
  console.log();
  console.log('    # Wrap in anonymous function and add require("mymodule")');
  console.log('    $ flatinator --app mymodule');
  console.log();
});

program.parse(process.argv);

if (program.input){

  var srcPath = path.relative(process.cwd(), path.resolve(program.input));

  fs.readFile(srcPath, 'utf8', function(err, data){

    var ast, walker, newAST, req, anon, body, entry;

    if (err){

      console.log('Error'.red + " Unable to open " + srcPath);
      throw new Error(err);

    } else {
      ast = uglify.parse(data);
      req = uglify.parse(fs.readFileSync(__dirname + '/../lib/require.js', 'utf8'));
      anon = uglify.parse(fs.readFileSync(__dirname + '/../lib/anonymous.js', 'utf8'));
      entry = uglify.parse(fs.readFileSync(__dirname + '/../lib/call.js', 'utf8'));

      var modules = {};
      var calls = {};
      var matches = {};
      var aliases = [];
      var issues = [];

      var exceptions = [];

      if (!program.app){
        newAST = req;
        body = newAST.body;
      } else {
        newAST = anon;
        body = newAST.body[0].body.expression.body;
        body.push(req);
        entry.body[0].body.args[0].value = program.app;
        calls[program.app] = [];
        calls[program.app].push(entry);
      }

      walker = new uglify.TreeWalker(function(node){

        var val;

        if (node instanceof uglify.AST_Call){
          if(node.args && node.args[0]){
            val = node.args[0].value;
          }
          if (node.expression.end.value == "require" && val){
            // calls to require
            if (!calls[val]){
              calls[val] = [];
            }
            calls[val].push(node);
          
          }else if (node.expression.start.value == "require" && node.expression.property == "register"){
            // calls to require.register
            body.push(node);
            modules[val] = node;
          } else if (node.expression.start.value == "require" && node.expression.property == "alias"){
            var segs = node.args[1].value.split('/');
            var name = segs[segs.length -2];
            if (!aliases.hasOwnProperty(name)){
              aliases[name] = node.args[0].value;
            }else if (aliases[name]!== node.args[0].value ){
              console.log('Error'.red + " More than one module has the canoncial name " + name.yellow);
              console.log('    ' + aliases[name].red);
              console.log('    ' + node.args[0].value );
            }
          }

        }

      });

      ast.walk(walker);

      console.log();
      console.log('    Processing internal require() calls...'.cyan);
      console.log();

      for(var call in calls){

        if(aliases.hasOwnProperty(call) && modules[ aliases[call] ]){

          console.log('        Resolved:'.green  + " " + aliases[call].cyan + " renamed " + call.cyan );
          modules[ aliases[call] ].args[0].value = call;
          modules[ aliases[call] ].resolved = true;

        }else{
          // if we're doing --app blah then that becomes an internal require() call, but probably doesn't have any alias data.
          var candidates = [];
          for(var mod in modules){
            if ((mod).indexOf(('-' + call + "/")) != -1 || (mod).indexOf((call + "/")) === 0 || (mod).indexOf((call + ".js")) != -1){
              candidates.push(mod);
            }
          }
          if (candidates.length === 1){
            aliases[call] = candidates[0];
            console.log('        Resolved:'.green  + " " + aliases[call].cyan + " renamed " + call.cyan );
            modules[ aliases[call] ].args[0].value = call;
            modules[ aliases[call] ].resolved = true;
          } else {
            console.log('        Error'.red);
          }

        }

      }

      console.log();
      console.log('    Processing modules not called internally...'.cyan);
      console.log();

      var count = 0;

      for(var mod in modules){
        if(!modules[mod].resolved){
          count ++;
          var segs = mod.split('/');
          name = segs[0];
          if(name){
            console.log('        Resolved:'.green + " " + mod.cyan + " renamed " + name.cyan );
            console.log();
            modules[mod].args[0].value = name;
          }else{
            console.log();
            console.log('        Ignoring:'.red + " " + mod.cyan + " remains " + mod.cyan );
            console.log();
          }
        }
      }
      if(count===0){

        console.log('        No orphan modules found. Hurrah!');

      }

      issues.forEach(function(issue){

        console.log(issue);

      });

      console.log();
      console.log('    Generating code...'.cyan);
      console.log();

      var time = (new Date).getTime();

      if(program.app){
        body.push(entry)
      }

      var stream = uglify.OutputStream({comments : true, beautify : true, indent_level : 2, semicolons: false });
      newAST.print(stream);
      var output = stream.toString();

      if(output){
        console.log('        Completed in ' + ((new Date).getTime() - time) + "ms");
        console.log();
      }

      time = (new Date).getTime();

      console.log('    Writing to file... '.cyan);
      console.log();
      fs.writeFile(path.resolve(process.cwd(), program.out, program.name + ".js"), stream.toString(), function(err){

        if (err){

          console.log("    Error:".red + " Unable to write output file. (" + ((new Date().getTime()) - startTime) + "ms)");
          console.log();
          process.exit(1);

        } else {

          console.log("        File " + path.resolve(process.cwd(), program.out, program.name + ".js") + " written successfully");
          console.log();

          console.log("    Done in ".cyan + ((new Date().getTime()) - startTime).toString().cyan + "ms".cyan);
          console.log();
          process.exit(0);

        }

      });
    }

  });

}
